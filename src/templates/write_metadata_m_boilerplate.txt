This macrosheds data product ({p}) was generated from the following raw dataset:

{mr}

This is the "munge kernel" function via which {p} was generated:

{k}

These were the arguments to that function:

{a}

Functions from external packages called inside the kernel function are either
referenced with `<package name>::<function>`, or are called from their aliases, defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/function_aliases.R

For definitions of most macrosheds functions called, see:

https://github.com/MacroSHEDS/data_processing/blob/master/src/global_helpers.R

Definitions not found there will be found in src/<network>/network_helpers.R or
src/<network>/<domain>/domain_helpers.R, where network is e.g. lter and domain
is e.g. hbef (Hubbard Brook Experimental Forest). For a catalogue of networks
and domains, see:

https://github.com/MacroSHEDS/data_processing/blob/master/data/general/site_data.csv

Note that most macrosheds functions are wrapped in a decorator function (handle_errors,
defined in global_helpers.R; see tinsel package for details). This decorator is not needed
to run the functions it wraps. To circumvent it, just make sure you don't load
function definitions using tinsel::source_decoratees. This would only happen if you
were to execute macrosheds code line-by-line, starting from:

https://github.com/MacroSHEDS/data_processing/blob/master/src/acquisition_master.R

However, also note that you might come across a function called ue, which wraps
any macrosheds function called at the top level inside a kernel function.
We use ue to bypass our custom error handler. Unless you're executing code
starting with acquisition_master.R, you should omit any call to ue.

Finally, note that the return value of a munge kernel function may be additionally modified by
a munge engine function. Inside the body of the engine function, you can see where the
munge kernel is retrieved with get() and called via do.call(). The only additional munging
that might be done by the munge engine (versus the munge kernel) would be to separate
a data file that contains many sites into individual data files of only one site each.
Munge engines are defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/munge_engines.R

Using these notes, and assuming you have a good bit of R programming experience,
you can piece together exactly how {p} was generated and regenerate it yourself.
You may have an easier time figuring out how {p} was generated
by just studying the code inside the munge kernel,
(including any macrosheds functions called within). That code will indicate all filtering,
aggregating, renaming, reshaping, etc. steps that we took.
